/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.4.0.11
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { MediaStream } from './mediaStream';

export interface MediaSourceInfo { 
    protocol?: MediaSourceInfo.ProtocolEnum;
    id?: string;
    path?: string;
    encoderPath?: string;
    encoderProtocol?: MediaSourceInfo.EncoderProtocolEnum;
    type?: MediaSourceInfo.TypeEnum;
    container?: string;
    size?: number;
    name?: string;
    isRemote?: boolean;
    runTimeTicks?: number;
    containerStartTimeTicks?: number;
    supportsTranscoding?: boolean;
    supportsDirectStream?: boolean;
    supportsDirectPlay?: boolean;
    isInfiniteStream?: boolean;
    requiresOpening?: boolean;
    openToken?: string;
    requiresClosing?: boolean;
    liveStreamId?: string;
    bufferMs?: number;
    requiresLooping?: boolean;
    supportsProbing?: boolean;
    video3DFormat?: MediaSourceInfo.Video3DFormatEnum;
    mediaStreams?: Array<MediaStream>;
    formats?: Array<string>;
    bitrate?: number;
    timestamp?: MediaSourceInfo.TimestampEnum;
    requiredHttpHeaders?: { [key: string]: string; };
    directStreamUrl?: string;
    transcodingUrl?: string;
    transcodingSubProtocol?: string;
    transcodingContainer?: string;
    analyzeDurationMs?: number;
    readAtNativeFramerate?: boolean;
    defaultAudioStreamIndex?: number;
    defaultSubtitleStreamIndex?: number;
}
export namespace MediaSourceInfo {
    export type ProtocolEnum = 'File' | 'Http' | 'Rtmp' | 'Rtsp' | 'Udp' | 'Rtp' | 'Ftp' | 'Mms';
    export const ProtocolEnum = {
        File: 'File' as ProtocolEnum,
        Http: 'Http' as ProtocolEnum,
        Rtmp: 'Rtmp' as ProtocolEnum,
        Rtsp: 'Rtsp' as ProtocolEnum,
        Udp: 'Udp' as ProtocolEnum,
        Rtp: 'Rtp' as ProtocolEnum,
        Ftp: 'Ftp' as ProtocolEnum,
        Mms: 'Mms' as ProtocolEnum
    };
    export type EncoderProtocolEnum = 'File' | 'Http' | 'Rtmp' | 'Rtsp' | 'Udp' | 'Rtp' | 'Ftp' | 'Mms';
    export const EncoderProtocolEnum = {
        File: 'File' as EncoderProtocolEnum,
        Http: 'Http' as EncoderProtocolEnum,
        Rtmp: 'Rtmp' as EncoderProtocolEnum,
        Rtsp: 'Rtsp' as EncoderProtocolEnum,
        Udp: 'Udp' as EncoderProtocolEnum,
        Rtp: 'Rtp' as EncoderProtocolEnum,
        Ftp: 'Ftp' as EncoderProtocolEnum,
        Mms: 'Mms' as EncoderProtocolEnum
    };
    export type TypeEnum = 'Default' | 'Grouping' | 'Placeholder';
    export const TypeEnum = {
        Default: 'Default' as TypeEnum,
        Grouping: 'Grouping' as TypeEnum,
        Placeholder: 'Placeholder' as TypeEnum
    };
    export type Video3DFormatEnum = 'HalfSideBySide' | 'FullSideBySide' | 'FullTopAndBottom' | 'HalfTopAndBottom' | 'MVC';
    export const Video3DFormatEnum = {
        HalfSideBySide: 'HalfSideBySide' as Video3DFormatEnum,
        FullSideBySide: 'FullSideBySide' as Video3DFormatEnum,
        FullTopAndBottom: 'FullTopAndBottom' as Video3DFormatEnum,
        HalfTopAndBottom: 'HalfTopAndBottom' as Video3DFormatEnum,
        MVC: 'MVC' as Video3DFormatEnum
    };
    export type TimestampEnum = 'None' | 'Zero' | 'Valid';
    export const TimestampEnum = {
        None: 'None' as TimestampEnum,
        Zero: 'Zero' as TimestampEnum,
        Valid: 'Valid' as TimestampEnum
    };
}